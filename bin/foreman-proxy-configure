#!/usr/bin/ruby
# -*- coding: utf-8 -*-
# vim: ts=2:sw=2:et:
#
# Copyright Â© 2013 Red Hat, Inc.
#
# This software is licensed to you under the GNU General Public License,
# version 2 (GPLv2). There is NO WARRANTY for this software, express or
# implied, including the implied warranties of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
# along with this software; if not, see
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
#

PREFIX = ENV['KATELLO_CONFIGURE_PREFIX'] || '/usr/share/katello/install/foreman-proxy'
PUPPET_MODULE_PATH =  '/usr/share/foreman-installer'

require 'optparse'
require 'fcntl'
require 'fileutils'
require 'rubygems'
require 'ruby-progressbar'
require 'socket'
require 'tempfile'
require 'puppet'
require 'puppet/util/selinux'
require "/usr/share/katello/install/puppet/lib/util/functions.rb"

$stdout.sync = true

default_path = "#{PREFIX}/default-answer-file"
options_format_path = "#{PREFIX}/options-format-file"
result_config_path = "/etc/foreman-proxy/foreman-proxy-configure.conf"
puppet_cmd = "/usr/bin/puppet apply --modulepath #{PUPPET_MODULE_PATH} --libdir /usr/share/katello/install/puppet/lib -v -d"
log_parent_directory = '/var/log/foreman-proxy'
default_progressbar_title = 'Foreman Proxy configuration'

# main dictionaries
$default_options = {}
$default_options_order = []
$default_options_errors = ''
$titles = {}
$temp_options = {}

# We first parse the default answer file. The list of options
# found in the default file also determines the command line
# options that can be specified (that's why we parse the default
# file first), as well as values that can be overwritten in user
# answer file.
if File.file?(default_path)
  $default_options, $default_options_order, $default_options_errors, $titles = read_answer_file(default_path)
end

# After having read the default option list, we parse the
# command line options.
options = {}

# answer file is always loaded by default
FileUtils.touch result_config_path
options['answer_file'] = result_config_path

option_parser = OptionParser.new
show_resulting_answer_file = false
nobars = false
debug_stdout = false
begin
  option_parser.banner = "Usage: #{$PROGRAM_NAME} [options]"
  option_parser.summary_width = 8
  option_parser.summary_indent = ' ' * 2

  $default_options_order.each do |key|
    option_parser.on('--' + key.gsub(/_/, '-') + '=' + key.upcase, String, word_wrap($titles[key])) do |value|
      options[key] = value
    end
  end

  option_parser.on_tail.on('-b', '--no-bars', 'Do not show progress bars and output puppet log instead') do
    nobars = true
  end
  option_parser.on_tail.on('-d', '--debug', 'Print more debugging information to on the stdout (use with -b)') do
    debug_stdout = true
  end
  option_parser.on_tail.on('-c', '--only-show-config', 'Print the resulting configuration and exit') do
    show_resulting_answer_file = true
  end
  option_parser.on_tail.on('-h', '--help', 'Show this short summary (more in the man page)') do
    puts option_parser
    exit
  end
  option_parser.parse!
rescue => e
  $stderr.puts e.message
  exit_with :general
end

# We only warn about possible errors in the default answer
# file here, to make it possible to use for example --help,
# even if there are errors in the default file.
if $default_options_errors != ''
  $stderr.puts $default_options_errors
  exit_with :default_option_error
end

# If there was an answer file specified, we parse it.
$final_options = parse_answer_option(options['answer_file'], $default_options)

# The command line options take precedence over the user
# answer file values.
$final_options.update(options)
$final_options.delete('answer_file')

# read required parameter list and its format
mandatory, regex, __unused_data_order, error, __unused_titles, __usused_docs = read_options_format(options_format_path)

non_interactive_option = _get_valid_option_value('non_interactive', $default_options, $final_options)

mandatory.each do |key, mand|
  if (not $final_options.has_key?(key) and mandatory[key]) or
  (not $final_options[key].nil? and not $final_options[key].to_s() =~ Regexp.new(regex[key]))
    $final_options[key] = _request_option_interactively($titles[key], regex[key], _get_valid_option_value(key, $default_options, $final_options), _is_option_true(non_interactive_option))
    if not $default_options_order.include?(key)
      $default_options_order.push(key)
    end
  end
end

if $default_options_errors != ''
  $stderr.puts $default_options_errors
  exit 6
end

# We will only keep values that are different from the default ones.
$final_options.each do |key, value|
  if $default_options[key] == value
    $final_options.delete(key)
  end
end

#TODO - enable SSL

if show_resulting_answer_file
  display_resulting_answer_file($default_options_order, $final_options)
  exit
end

check_root_id('foreman-proxy-configure')

# we MUST change the current directory to /root because Puppet expects that
Dir.chdir '/root'

# <BEFORE CONFIGURATION CHECKS>
check_hostname
# </BEFORE CONFIGURATION CHECKS>

# Puppet tries to determine FQDN from /etc/resolv.conf and we do NOT want this behavior
# (see https://bugzilla.redhat.com/show_bug.cgi?id=760265)
facter_hostname = Socket.gethostname
ENV['FACTER_fqdn'] = facter_hostname

# start configuring
puts 'Starting Foreman Proxy configuration'
create_answer_file(result_config_path, $final_options, $default_options_order, $titles)

# additional temporary file which is also used (but deleted afterwards)
temp_config = create_temp_config_file($temp_options)
temp_config_path = temp_config.path

now = Time.now.strftime("%Y%m%d-%H%M%S")
log_directory = log_parent_directory + '/foreman-proxy-configure-' + now
log_directory_link = log_parent_directory + '/foreman-proxy-configure'
if File.symlink?(log_directory_link)
  begin
    File.unlink(log_directory_link)
  rescue
  end
end
if File.directory?(log_directory_link)
  File.rename(log_directory_link, log_directory_link + '-backup-' + now)
end

FileUtils.mkdir_p(log_directory, :mode => 0775)
FileUtils.ln_sf('foreman-proxy-configure-' + now, log_directory_link)
FileUtils.chown('foreman-proxy', 'foreman-proxy', log_directory)
FileUtils.chown('foreman-proxy', 'foreman-proxy', log_directory_link)
FileUtils.cp result_config_path, log_directory
(Object.new.extend Puppet::Util::SELinux).set_selinux_context(log_directory_link, 'system_u', :seluser)

ENV['KATELLO_ANSWER_FILE'] = result_config_path
ENV['KATELLO_TEMP_ANSWER_FILE'] = temp_config_path

# numbers are expected lines in those logs, alas currently not used
commands_by_logfiles = {}

puppet_logfile_filename = log_directory + '/main.log'
puppet_logfile_aprox_size = 600

forwarders = _get_valid_option_value('dns_forwarders', $default_options, $final_options)
forwarders = %x(awk '/^\s*nameserver/ {print $2}' < /etc/resolv.conf |paste -sd ",") if !forwarders or forwarders.empty?
# from aa,bb,cc make real array, i.e ["aa", "bb", "cc"]
forwarders = forwarders.split(',').map {|x| "\"#{x.strip}\""}
# and now make it sanitized string '["aa", "bb", "cc"]'
forwarders = "[%s]" % forwarders.join(', ')

command = <<COMMAND
class { foreman_proxy:
  custom_repo       => true,
  dhcp              => #{_get_valid_option_value('dhcp', $default_options, $final_options)},
  dhcp_interface    => "#{_get_valid_option_value('dhcp_interface', $default_options, $final_options)}",
  dns               => #{_get_valid_option_value('dns', $default_options, $final_options)},
  dns_forwarders    => #{forwarders},
  dns_interface     => "#{_get_valid_option_value('dns_interface', $default_options, $final_options)}",
  port              => "#{_get_valid_option_value('port', $default_options, $final_options)}",
  puppetca          => #{_get_valid_option_value('puppetca', $default_options, $final_options)},
  ssl_ca            => false,
  ssl_cert          => false,
  ssl_key           => false,
  tftp_servername   => "#{facter_hostname}",
  tftp              => #{_get_valid_option_value('tftp', $default_options, $final_options)},
}
COMMAND

if debug_stdout
  puts command
end

main_puppet(puppet_cmd, nobars, default_progressbar_title, puppet_logfile_filename, puppet_logfile_aprox_size, debug_stdout, commands_by_logfiles, command)

exit
